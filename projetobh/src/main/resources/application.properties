#datasource
spring.datasource.url = jdbc:postgresql://localhost:5432/db_bh_neonatal
spring.datasource.username = postgres
spring.datasource.password = @901256
spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.validationQuery = SELECT 1
spring.profiles.active=dev

#jpa/hibernate
#spring.jpa.open-in-view= true -> habilita um filtro no spring que vai lidar com aquele problema de LazyException, quando voce tem um relacionamento 1:N ou N:N
#Isso porque esses relacionamento fazem consultas do tipo Lazy por padrão - 
spring.jpa.show-sql = true
spring.jpa.open-in-view = true 
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.database=POSTGRESQL
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# THYMELEAF (ThymeleafAutoConfiguration)
#Indica que o cache de página do Thymeleaf está habilitado com o valor padrão spring.thymeleaf.cache=true, isso é bom usar quando voçê esta
#em modo de produção, quando voçê está trabalhando em modo desenvolvimento esse cache pode
#pode vir a atrapalhar, pode você faz uma atualização no seu código fonte, e quando
#atualiza a página você pode estar pegando alguma coisa em cache
spring.thymeleaf.cache=false